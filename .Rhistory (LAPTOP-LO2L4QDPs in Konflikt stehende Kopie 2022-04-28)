tick = F)
segments(
x0 = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y0 = c(QoI0CI[1,], QoI1CI[1,]),
y1 = c(QoI0CI[2,], QoI1CI[2,]) ,
lwd = 6,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.325, 0.525, 0.725),
lty = "dashed",
col = "lightgrey")
plot(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
xlim = c(0.15, 0.9),
ylim = c(0, 0.65),
bty = "n",
xaxt = "n",
las = 1,
xlab = "",
ylab = "Predicted Probability of Voting for Party",
main = "Not religious and religious voters",
font.main = 1,
type = "n"
)
abline(h = seq(0, 0.6, 0.1),
col = adjustcolor("black", alpha = 0.2))
points(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
pch = 19,
cex = 1,
col = partycolors
)
axis(1,
at = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
labels = rep(c("rel.", "not rel,"), 4),
las = 1)
axis(1,
at = c(0.225, 0.425, 0.625, 0.825),
labels = levels(df$vote),
tick = F)
segments(
x0 = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y0 = c(QoI0CI[1,], QoI1CI[1,]),
y1 = c(QoI0CI[2,], QoI1CI[2,]) ,
lwd = 6,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.325, 0.525, 0.725),
lty = "dashed",
col = "lightgrey")
plot(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
xlim = c(0.15, 0.9),
ylim = c(0, 0.65),
bty = "n",
xaxt = "n",
las = 1,
xlab = "",
ylab = "Predicted Probability of Voting for Party",
main = "Not religious and religious voters",
font.main = 1,
type = "n"
)
abline(h = seq(0, 0.6, 0.1),
col = adjustcolor("black", alpha = 0.2))
points(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
pch = 19,
cex = 1,
col = partycolors
)
axis(1,
at = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
labels = rep(c("religious", "not\nreligious"), 4),
las = 1,
cex = 0.7,
axis = "n")
axis(1,
at = c(0.225, 0.425, 0.625, 0.825),
labels = levels(df$vote),
tick = F)
segments(
x0 = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y0 = c(QoI0CI[1,], QoI1CI[1,]),
y1 = c(QoI0CI[2,], QoI1CI[2,]) ,
lwd = 6,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.325, 0.525, 0.725),
lty = "dashed",
col = "lightgrey")
plot(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
xlim = c(0.15, 0.9),
ylim = c(-0.1, 0.65),
bty = "n",
xaxt = "n",
las = 1,
xlab = "",
ylab = "Predicted Probability of Voting for Party",
main = "Not religious and religious voters",
font.main = 1,
type = "n"
)
abline(h = seq(0, 0.6, 0.1),
col = adjustcolor("black", alpha = 0.2))
points(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
pch = 19,
cex = 1,
col = partycolors
)
text(1,
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = rep(0, 8),
labels = rep(c("religious", "not\nreligious"), 4),
las = 1,
cex = 0.7,
tick = F)
axis(1,
at = c(0.225, 0.425, 0.625, 0.825),
labels = levels(df$vote),
tick = F)
segments(
x0 = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y0 = c(QoI0CI[1,], QoI1CI[1,]),
y1 = c(QoI0CI[2,], QoI1CI[2,]) ,
lwd = 6,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.325, 0.525, 0.725),
lty = "dashed",
col = "lightgrey")
?text
plot(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
xlim = c(0.15, 0.9),
ylim = c(-0.1, 0.65),
bty = "n",
xaxt = "n",
las = 1,
xlab = "",
ylab = "Predicted Probability of Voting for Party",
main = "Not religious and religious voters",
font.main = 1,
type = "n"
)
abline(h = seq(0, 0.6, 0.1),
col = adjustcolor("black", alpha = 0.2))
points(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
pch = 19,
cex = 1,
col = partycolors
)
text(1,
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = rep(0, 8),
labels = rep(c("religious", "not\nreligious"), 4),
adj = c(1,1),
cex = 0.7)
axis(1,
at = c(0.225, 0.425, 0.625, 0.825),
labels = levels(df$vote),
tick = F)
segments(
x0 = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y0 = c(QoI0CI[1,], QoI1CI[1,]),
y1 = c(QoI0CI[2,], QoI1CI[2,]) ,
lwd = 6,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.325, 0.525, 0.725),
lty = "dashed",
col = "lightgrey")
rep(c("religious", "not\nreligious"), 4)
plot(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
xlim = c(0.15, 0.9),
ylim = c(-0.1, 0.65),
bty = "n",
xaxt = "n",
las = 1,
xlab = "",
ylab = "Predicted Probability of Voting for Party",
main = "Not religious and religious voters",
font.main = 1,
type = "n"
)
abline(h = seq(0, 0.6, 0.1),
col = adjustcolor("black", alpha = 0.2))
points(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
pch = 19,
cex = 1,
col = partycolors
)
text(1,
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = rep(0, 8),
labels = rep(c("religious", "not\nreligious"), each = 4),
srt = -90,
cex = 0.7)
axis(1,
at = c(0.225, 0.425, 0.625, 0.825),
labels = levels(df$vote),
tick = F)
segments(
x0 = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y0 = c(QoI0CI[1,], QoI1CI[1,]),
y1 = c(QoI0CI[2,], QoI1CI[2,]) ,
lwd = 6,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.325, 0.525, 0.725),
lty = "dashed",
col = "lightgrey")
plot(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
xlim = c(0.15, 0.9),
ylim = c(-0.1, 0.65),
bty = "n",
xaxt = "n",
las = 1,
xlab = "",
ylab = "Predicted Probability of Voting for Party",
main = "Not religious and religious voters",
font.main = 1,
type = "n"
)
abline(h = seq(0, 0.6, 0.1),
col = adjustcolor("black", alpha = 0.2))
points(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
pch = 19,
cex = 1,
col = partycolors
)
text(1,
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = rep(0, 8),
labels = rep(c("religious", "not\nreligious"), each = 4),
srt = 90,
cex = 0.7)
axis(1,
at = c(0.225, 0.425, 0.625, 0.825),
labels = levels(df$vote),
tick = F)
segments(
x0 = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y0 = c(QoI0CI[1,], QoI1CI[1,]),
y1 = c(QoI0CI[2,], QoI1CI[2,]) ,
lwd = 6,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.325, 0.525, 0.725),
lty = "dashed",
col = "lightgrey")
plot(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
xlim = c(0.15, 0.9),
ylim = c(-0.1, 0.65),
bty = "n",
xaxt = "n",
las = 1,
xlab = "",
ylab = "Predicted Probability of Voting for Party",
main = "Not religious and religious voters",
font.main = 1,
type = "n"
)
abline(h = seq(0, 0.6, 0.1),
col = adjustcolor("black", alpha = 0.2))
points(
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = c(QoI0Mean, QoI1Mean),
pch = 19,
cex = 1,
col = partycolors
)
text(1,
x = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y = rep(-0.01, 8),
labels = rep(c("not\nreligious", "religious"), each = 4),
srt = 90,
cex = 0.7)
axis(1,
at = c(0.225, 0.425, 0.625, 0.825),
labels = levels(df$vote),
tick = F)
segments(
x0 = c(0.2, 0.4, 0.6, 0.8, 0.25, 0.45, 0.65, 0.85),
y0 = c(QoI0CI[1,], QoI1CI[1,]),
y1 = c(QoI0CI[2,], QoI1CI[2,]) ,
lwd = 6,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.325, 0.525, 0.725),
lty = "dashed",
col = "lightgrey")
# we substract religious from not religious
QoIFD <- P[, , 2] - P[, , 1]
QoIFDMean <- apply(QoIFD, 2, mean)
QoIFDCI <-
apply(QoIFD, 2, function(x)
quantile(x, probs = c(0.025, 0.975)))
plot(
x = c(0.2, 0.4, 0.6, 0.8),
y = QoIFDMean,
xlim = c(0.1, 0.9),
ylim = c(-0.5, 0.5),
bty = "n",
xaxt = "n",
las = 1,
xlab = "",
ylab = "First Difference",
main = "First Difference between religious and not religious voters",
font.main = 1,
type = "n"
)
abline(h = seq(-0.4, 0.4, 0.1),
col = adjustcolor("black", alpha = 0.2))
abline(h = 0, lwd = 1, lty = "solid")
points(
x = c(0.2, 0.4, 0.6, 0.8),
y = QoIFDMean,
pch = 19,
cex = 0.8,
col = partycolors
)
text(x = (c(0.2, 0.4, 0.6, 0.8) - 0.06),
y = QoIFDMean,
labels = levels(df$vote))
segments(
x0 = c(0.2, 0.4, 0.6, 0.8),
y0 = QoIFDCI[1,],
y1 = QoIFDCI[2,],
lwd = 4,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.3, 0.5, 0.7),
lty = "dashed",
col = "lightgrey")
# we substract religious from not religious
QoIFD <- P[, , 2] - P[, , 1]
QoIFDMean <- apply(QoIFD, 2, mean)
QoIFDCI <-
apply(QoIFD, 2, function(x)
quantile(x, probs = c(0.025, 0.975)))
plot(
x = c(0.2, 0.4, 0.6, 0.8),
y = QoIFDMean,
xlim = c(0.1, 0.9),
ylim = c(-0.5, 0.5),
bty = "n",
xaxt = "n",
las = 1,
xlab = "",
ylab = "First Difference",
main = "First Difference between religious and not religious voters",
font.main = 1,
type = "n"
)
abline(h = seq(-0.4, 0.4, 0.1),
col = adjustcolor("black", alpha = 0.2))
abline(h = 0, lwd = 1, lty = "solid")
points(
x = c(0.2, 0.4, 0.6, 0.8),
y = QoIFDMean,
pch = 19,
cex = 1,
col = partycolors
)
text(x = (c(0.2, 0.4, 0.6, 0.8) - 0.06),
y = QoIFDMean,
labels = levels(df$vote))
segments(
x0 = c(0.2, 0.4, 0.6, 0.8),
y0 = QoIFDCI[1,],
y1 = QoIFDCI[2,],
lwd = 6,
lend = 1,
col = adjustcolor(partycolors, alpha = 0.4)
)
abline(v = c(0.3, 0.5, 0.7),
lty = "dashed",
col = "lightgrey")
# The first line sets an option for the final document that can be produced from
# the .Rmd file. Don't worry about it.
knitr::opts_chunk$set(echo = TRUE)
# First you define which packages you need for your analysis and assign it to
# the p_needed object.
p_needed <-
c("viridis", "knitr", "MASS", "pROC", "nnet")
# Now you check which packages are already installed on your computer.
# The function installed.packages() returns a vector with all the installed
# packages.
packages <- rownames(installed.packages())
# Then you check which of the packages you need are not installed on your
# computer yet. Essentially you compare the vector p_needed with the vector
# packages. The result of this comparison is assigned to p_to_install.
p_to_install <- p_needed[!(p_needed %in% packages)]
# If at least one element is in p_to_install you then install those missing
# packages.
if (length(p_to_install) > 0) {
install.packages(p_to_install)
}
# Now that all packages are installed on the computer, you can load them for
# this project. Additionally the expression returns whether the packages were
# successfully loaded.
sapply(p_needed, require, character.only = TRUE)
load("raw-data/Nethvote.RData")
df <- Nethvote
head(df)
barplot(table(df$vote),
main = "Distribution of Vote Choice",
font.main = 1,
border = NA,
las = 1)
ll_mnl <- function(theta, X, Z) {
# declarations
k <- ncol(X) # k independent variables
J <- ncol(Z) # J choices in the dependent variable
# create matrix of betas and set the first category to 0
beta <- matrix(0,
ncol = k,
nrow = J)
beta[-1, ] <- matrix(theta[1:(k * (J - 1))],
ncol = k,
byrow = T)
# Systematic component: utilities
# X_i %*% beta_J in each row (i.e. for each available choice)
V <- apply(beta, 1,
function(b)
X %*% b)
# Sum of exp(V)
Sexp <- apply(V, 1, function(v)
sum(exp(v)))
# probabilities
P <- apply(V, 2, function(v)
exp(v) / Sexp)
# log-likelihood
loglik <- sum(log(P[Z]))
return(loglik)
}
cats <- sort(unique(df$vote))  # different categories
J <- length(unique(df$vote))  # number of categories
Z <- matrix(NA,
nrow = length(df$vote),
ncol = J)  # indicator matrix
for (j in 1:J) {
Z[, j] <- df$vote == cats[j]
}
colnames(Z) <- cats
# Sanity check
head(Z)
head(df$vote)
# Prepare our usual matrix X
# we include relig, class, income, educ, age, urban
# those variables are in column 6 to 11 in our data frame
X <- as.matrix(cbind(1, df[, 6:11]))
# How many start values do we need?
startvals <- rep(0, ncol(X) * (J - 1))
# Let's check whether our function works.
ll_mnl(startvals, X, Z)
#
res <- optim(
startvals,
ll_mnl,
X = X,
Z = Z,
method = "BFGS",
control = list(fnscale = -1, trace = TRUE),
hessian = TRUE
)
betaHat <- matrix(res$par,
ncol = ncol(X),
nrow = ncol(Z)-1,
byrow = T)
colnames(betaHat) <- c("(Intercept)", colnames(X)[2:ncol(X)])
rownames(betaHat) <-  levels(df$vote)[2:ncol(Z)]
se <-
matrix(sqrt(diag(solve(-res$hessian))),
ncol = ncol(X),
nrow = ncol(Z)-1,
byrow = T)
colnames(se) <- c("(Intercept)", colnames(X)[2:7])
rownames(se) <-  levels(df$vote)[2:4]
betaHat
se
